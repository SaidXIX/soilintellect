// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String           @id @default(uuid())
  email                       String           @unique
  firstName                   String
  familyName                  String
  password                    String?
  verified                    Boolean          @default(false)
  verificationToken           String?          @unique
  passwordResetToken          String?          @unique
  passwordResetTokenExpiresAt DateTime?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  deletedAt                   DateTime?
  socialProfiles              SocialProfile[]
  samples                     Sample[]
  results                     Result[]
  zones                       Zone[]
}

model SocialProfile {
  id         Int                 @id @default(autoincrement())
  provider   SocialAuthProvider  @default(GOOGLE)
  providerId String
  userId     String
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  deletedAt  DateTime?
}

enum SocialAuthProvider {
  GOOGLE
}

model Zone {
  id        String     @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  location  String
  implant   String
  samples   Sample[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Sample {
  id          String     @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  zoneId      String
  zone        Zone      @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  N           Float?
  P           Float?
  K           Float?
  temperature Float?
  humidity    Float?
  ph          Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  results     Result[]
}

model Result {
  id          String      @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sampleId    String
  sample      Sample     @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  type        ResultType
  class       String
  probability Float
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
}

enum ResultType {
  IMPLANT
  SOILTYPE
}
